import { Command, CommandParams } from "../utils/structs";

export default class EvalCommand extends Command {
    name = 'eval';
    desc = 'Evalue le code donn√© en param√®tre';
    categorie = 'Syst√®me';
    usage = 'eval <code>';
    ownerOnly = true;

    async execute(args: CommandParams) {
        if (args.message.author.id != args.bot.config.ownerId) { console.log(args.message.author.username + " a essay√© de faire: " + args.message.content); return };

        var test: boolean | string = args.args[0] == '-t' ? args.args.shift() : false // Si args.args[0] est √©gal √† '-t' je l'enl√®ve car sinon √ßa va faire buguer en dessous
        var toEval: string = args.args.join(" "); // On joint les √©l√©ments avec un espace

        try {
            var evaluated: any = eval(toEval); // On √©value le code, c√†d on fait comme si c'√©tait du code √©crit comme ici
        } catch { args.message.delete().catch() } // Si √ßa passe pas je supprime le message (si √ßa r√©ussit il est supprim√© dans events.ts)

        if (test) { // Dans une condition, une chaine de caract√®res vide vaut true
            try { // Dans un try/catch, il ex√©cute le code dans la partie catch si celui dans le try a plant√© quelque part
                args.message.channel.send({
                    embed: {
                        color: 3066993,
                        description: "**üì• Code :\n" + toEval + "\n:outbox_tray: R√©sultat : `\n" + evaluated + "`**",
                        timestamp: Date.now(),
                    }
                });
            } catch (error) {
                args.message.channel.send({
                    embed: {
                        color: 15158332,
                        title: 'Evaluation Cancelled',
                        description: `${error}`,
                        timestamp: Date.now()
                    }
                });
            };
        };
    };
};